# -*- coding: utf-8 -*-
"""ThucHanhLenhPrint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ro9VoMX_HBVJTn0__EleezaU__cBMNji

####Một số ví dụ với print

######1.Định dạng cơ bản
"""

# default arguments
print("Hello {}, your balance is {}.".format("Adam", 230.2346))

# positional arguments
print("Hello {0}, your balance is {1}.".format("Adam", 230.2346))

# keyword arguments
print("Hello {name}, your balance is {blc}.".format(name="Adam", blc=230.2346))

# mixed arguments
print("Hello {0}, your balance is {blc}.".format("Adam", blc=230.2346))

"""######2.Định dạng số đơn giản"""

# integer arguments
print("The number is:{:d}".format(123))

# float arguments
# Định dạng f sẽ lấy 6 chữ số thập phân 
print("The float number is:{:f}".format(123.4567898))

# octal, binary and hexadecimal format
print("bin: {0:b}, oct: {0:o}, hex: {0:x}".format(12))

"""######3.Định dạng có quy cách """

# giới hạn 5 chữ số nguyên 
print("{:5d}".format(12))

# định dạng số nguyên nhỏ hơn giá trị thực của nó, dẫn đến việc định dạng vô nghĩa
print("{:2d}".format(1234))

# lấy 8 ký tự (tính cả dâu .), trong đó phần thực chiếm 3 ký tự 
print("{:8.3f}".format(12.2346))

# integer numbers with minimum width filled with zeros
print("{:05d}".format(12))

# padding for float numbers filled with zeros
print("{:08.3f}".format(12.2346))

"""######4.Định dạng số có dấu """

# show the + sign
print("{:+f} {:+f}".format(12.23, -12.23))

# show the - sign only
print("{:-f} {:-f}".format(12.23, -12.23))

# show space for + sign
print("{: f} {: f}".format(12.23, -12.23))

"""######5.Định dạng có căn chỉnh"""

# integer numbers with right alignment
print("{:5d}".format(12))

# float numbers with center alignment
print("{:^10.3f}".format(12.2346))

# integer left alignment filled with zeros
print("{:<05d}".format(12))

# float numbers with center alignment
print("{:=8.3f}".format(-12.2346))

"""######6.Định dạng có căn chỉnh với chuỗi"""

# string padding with left alignment
print("{:5}".format("cat"))

# string padding with right alignment
print("{:>5}".format("cat"))

# string padding with center alignment
print("{:^5}".format("cat"))

# string padding with center alignment
# and '*' padding character
print("{:*^5}".format("cat"))

"""######7.Định dạng cho một đối tượng"""

# define Person class
class Person:
    age = 23
    name = "Adam"

# format age
print("{p.name}'s age is: {p.age}".format(p=Person()))

"""######8.Định dạng 1 dictionary"""

# define Person dictionary
person = {'age': 23, 'name': 'Adam'}

# format age
print("{p[name]}'s age is: {p[age]}".format(p=person))

# define Person dictionary
# Sử dụng cấu trúc format(**mapping)
# ** ở đây được hiểu là có 2 trường dữ liệu trong dic, là key và value
person = {'age': 23, 'name': 'Adam'}

# format age
print("{name}'s age is: {age}, {age}".format(**person))

"""######9.Đối số dưới dạng format"""

# dynamic string format template
string = "{:{fill}{align}{width}}"

# passing format codes as arguments
print(string.format('cat', fill='*', align='^', width=5))

# dynamic float format template
num = "{:{align}{width}.{precision}f}"

# passing format codes as arguments
print(num.format(123.236, align='<', width=8, precision=2))

"""######10.Định dạng date time"""

import datetime
# datetime formatting
date = datetime.datetime.now()
print("It's now: {:%Y/%m/%d %H:%M:%S}".format(date))

# complex number formatting
complexNumber = 1+2j
print("Real part: {0.real} and Imaginary part: {0.imag}".format(complexNumber))

# custom __format__() method
class Person:
    def __format__(self, format):
        if(format == 'age'):
            return '23'
        return 'None'

print("Adam's age is: {:age}".format(Person()))

"""######10. __str()__ và __repr()__ viết tắt !r và !s sử dụng format()"""

# __str__() and __repr__() shorthand !r and !s
print("Quotes: {0!r}, Without Quotes: {0!s}".format("cat"))

# __str__() and __repr__() implementation for class
class Person:
    def __str__(self):
        return "STR"
    def __repr__(self):
        return "REPR"

print("repr: {p!r}, str: {p!s}".format(p=Person()))









